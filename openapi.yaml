openapi: 3.0.3
info:
  title: Brain2 API
  version: 1.0.0
  description: |
    ## Brain2 Knowledge Graph API
    A RESTful API for managing personal knowledge graphs with automatic memory connections.

paths:
  /api/nodes:
    get:
      summary: List all memory nodes for the authenticated user
      operationId: listNodes
      tags:
        - Memory Management
      responses:
        '200':
          description: Successfully retrieved user's memory nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  nodes:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
                    description: Array of memory nodes owned by the authenticated user
                example:
                  nodes:
                    - nodeId: "abc-123"
                      content: "Learning about serverless architecture"
                      timestamp: "2024-01-15T10:30:00Z"
                      version: 1
        '401':
          description: Authentication required - invalid or missing JWT token
        '500':
          description: Internal server error - check logs for details
          
    post:
      summary: Create a new memory node with automatic keyword extraction
      operationId: createNode
      tags:
        - Memory Management
      requestBody:
        required: true
        description: Memory content to be processed and stored
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodeRequest'
            example:
              content: "GraphQL is a query language for APIs that provides a complete description of the data in your API"
      responses:
        '201':
          description: Memory node created successfully with automatic connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
              example:
                nodeId: "def-456"
                content: "GraphQL is a query language for APIs that provides a complete description of the data in your API"
                timestamp: "2024-01-15T14:22:00Z"
                version: 0
        '400':
          description: Validation error - content is required and cannot be empty
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "content cannot be empty"
        '401':
          description: Authentication required - invalid or missing JWT token
        '500':
          description: Internal server error - node creation failed

  /api/nodes/{nodeId}:
    get:
      summary: Get detailed information for a single memory node
      operationId: getNode
      tags:
        - Memory Management
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier for the memory node
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
            example: "abc-123-def-456"
      responses:
        '200':
          description: Successfully retrieved node details with connections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodeDetails'
              example:
                nodeId: "abc-123-def-456"
                content: "Machine learning models require large datasets for training"
                timestamp: "2024-01-15T10:30:00Z"
                version: 2
                edges: ["def-456-ghi-789", "ghi-789-jkl-012"]
        '404':
          description: Node not found or user doesn't have access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "node not found"
        '401':
          description: Authentication required
        '500':
          description: Internal server error
          
    put:
      summary: Update a memory node's content with automatic reconnection
      operationId: updateNode
      tags:
        - Memory Management
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier for the memory node to update
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      requestBody:
        required: true
        description: Updated content for the memory node
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateNodeRequest'
            example:
              content: "Deep learning models require even larger datasets and more computational power than traditional ML"
      responses:
        '200':
          description: Node updated successfully with recalculated connections
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Node updated successfully"
                  nodeId:
                    type: string
                    example: "abc-123-def-456"
                  version:
                    type: integer
                    example: 3
        '400':
          description: Validation error - content cannot be empty
        '404':
          description: Node not found or user doesn't have access
        '409':
          description: Version conflict - node was modified by another process
        '401':
          description: Authentication required
        '500':
          description: Internal server error during update
          
    delete:
      summary: Delete a memory node and clean up all connections
      operationId: deleteNode
      tags:
        - Memory Management
      parameters:
        - name: nodeId
          in: path
          required: true
          description: Unique identifier for the memory node to delete
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '204':
          description: Node deleted successfully (no content returned)
        '404':
          description: Node not found or user doesn't have access
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "node not found"
        '401':
          description: Authentication required
        '500':
          description: Internal server error during deletion

  /api/nodes/bulk-delete:
    post:
      summary: Delete multiple memory nodes efficiently in a single operation
      operationId: bulkDeleteNodes
      tags:
        - Memory Management
        - Bulk Operations
      requestBody:
        required: true
        description: List of node IDs to delete (max 100)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDeleteRequest'
            example:
              nodeIds: 
                - "abc-123-def-456"
                - "def-456-ghi-789"
                - "ghi-789-jkl-012"
      responses:
        '200':
          description: Bulk delete operation completed (may include partial failures)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkDeleteResponse'
              example:
                deletedCount: 2
                failedNodeIds: ["ghi-789-jkl-012"]
                message: "Successfully deleted 2 out of 3 nodes"
        '400':
          description: Validation error - invalid request format or too many nodes
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "cannot delete more than 100 nodes at once"
        '401':
          description: Authentication required
        '500':
          description: Internal server error during bulk operation
  
  /api/graph-data:
    get:
      summary: Get complete graph data optimized for visualization libraries
      operationId: getGraphData
      tags:
        - Graph Visualization
        - Data Export
      responses:
        '200':
          description: Complete graph data ready for visualization
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GraphDataResponse'
              example:
                elements:
                  - data:
                      id: "node-abc-123"
                      label: "Machine Learning Basics"
                  - data:
                      id: "node-def-456" 
                      label: "Neural Networks"
                  - data:
                      id: "edge-1"
                      source: "node-abc-123"
                      target: "node-def-456"
        '401':
          description: Authentication required
        '500':
          description: Internal server error retrieving graph data

  /api/categories:
    get:
      summary: List all categories for the authenticated user
      operationId: listCategories
      tags:
        - Category Management
      responses:
        '200':
          description: Successfully retrieved user's categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  categories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Category'
                    description: Array of categories owned by the authenticated user
        '401':
          description: Authentication required
        '500':
          description: Internal server error

    post:
      summary: Create a new category
      operationId: createCategory
      tags:
        - Category Management
      requestBody:
        required: true
        description: Category details to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: Validation error - title is required
        '401':
          description: Authentication required
        '500':
          description: Internal server error

  /api/categories/{categoryId}:
    get:
      summary: Get detailed information for a single category
      operationId: getCategory
      tags:
        - Category Management
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '200':
          description: Successfully retrieved category details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '404':
          description: Category not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

    put:
      summary: Update a category's details
      operationId: updateCategory
      tags:
        - Category Management
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category to update
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      requestBody:
        required: true
        description: Updated category details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Category updated successfully"
                  categoryId:
                    type: string
                    example: "abc-123-def-456"
        '400':
          description: Validation error
        '404':
          description: Category not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

    delete:
      summary: Delete a category and all its memory associations
      operationId: deleteCategory
      tags:
        - Category Management
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category to delete
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '204':
          description: Category deleted successfully
        '404':
          description: Category not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

  /api/categories/{categoryId}/memories:
    get:
      summary: Get all memories in a specific category
      operationId: getMemoriesInCategory
      tags:
        - Category Management
        - Memory Organization
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '200':
          description: Successfully retrieved memories in category
          content:
            application/json:
              schema:
                type: object
                properties:
                  memories:
                    type: array
                    items:
                      $ref: '#/components/schemas/Node'
        '404':
          description: Category not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

    post:
      summary: Add a memory to a category
      operationId: addMemoryToCategory
      tags:
        - Category Management
        - Memory Organization
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      requestBody:
        required: true
        description: Memory to add to category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddMemoryToCategoryRequest'
      responses:
        '200':
          description: Memory added to category successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Memory added to category successfully"
        '400':
          description: Validation error
        '404':
          description: Category or memory not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

  /api/categories/{categoryId}/memories/{memoryId}:
    delete:
      summary: Remove a memory from a category
      operationId: removeMemoryFromCategory
      tags:
        - Category Management
        - Memory Organization
      parameters:
        - name: categoryId
          in: path
          required: true
          description: Unique identifier for the category
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
        - name: memoryId
          in: path
          required: true
          description: Unique identifier for the memory
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
      responses:
        '204':
          description: Memory removed from category successfully
        '404':
          description: Category or memory not found
        '401':
          description: Authentication required
        '500':
          description: Internal server error

components:
  schemas:
    Node:
      type: object
      required:
        - nodeId
        - content
        - timestamp
        - version
      properties:
        nodeId:
          type: string
          pattern: '^[a-zA-Z0-9-]+$'
          example: "abc-123-def-456-ghi-789"
        content:
          type: string
          minLength: 1
          maxLength: 10000
          example: "Machine learning requires large datasets for effective model training"
        tags:
          type: array
          items:
            type: string
          example: ["urgent", "work", "ml"]
          description: "User-defined tags for organizing and categorizing memories"
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00Z"
        version:
          type: integer
          minimum: 0
          example: 1

    NodeDetails:
      allOf:
        - $ref: '#/components/schemas/Node'
        - type: object
          properties:
            edges:
              type: array
              items:
                type: string
                pattern: '^[a-zA-Z0-9-]+$'
              example: 
                - "def-456-ghi-789"
                - "ghi-789-jkl-012"
                - "jkl-012-mno-345"

    CreateNodeRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 10000
          example: "GraphQL provides a more efficient alternative to REST for complex data fetching requirements"
        tags:
          type: array
          items:
            type: string
          description: User-defined tags for organizing and categorizing memories
          maxItems: 10
          example: ["work", "graphql", "api"]

    UpdateNodeRequest:
      type: object
      required:
        - content
      properties:
        content:
          type: string
          minLength: 1
          maxLength: 10000
          example: "GraphQL and REST both have their place, but GraphQL excels in scenarios requiring flexible data fetching"
        tags:
          type: array
          items:
            type: string
          description: User-defined tags for organizing and categorizing memories
          maxItems: 10
          example: ["work", "graphql", "api", "updated"]

    BulkDeleteRequest:
      type: object
      required:
        - nodeIds
      properties:
        nodeIds:
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
          minItems: 1
          maxItems: 100
          example: 
            - "abc-123-def-456"
            - "def-456-ghi-789"
            - "ghi-789-jkl-012"

    BulkDeleteResponse:
      type: object
      properties:
        deletedCount:
          type: integer
          minimum: 0
          example: 2
        failedNodeIds:
          type: array
          items:
            type: string
            pattern: '^[a-zA-Z0-9-]+$'
          example: ["ghi-789-jkl-012"]
        message:
          type: string
          example: "Successfully deleted 2 out of 3 nodes. 1 node could not be found."
          
    GraphDataResponse:
      type: object
      properties:
        elements:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/GraphNode'
              - $ref: '#/components/schemas/GraphEdge'
          example:
            - data:
                id: "node-abc-123"
                label: "Machine Learning"
            - data:
                id: "node-def-456"
                label: "Neural Networks" 
            - data:
                id: "edge-1"
                source: "node-abc-123"
                target: "node-def-456"

    GraphNode:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/NodeData'

    NodeData:
      type: object
      required:
        - id
        - label
      properties:
        id:
          type: string
          pattern: '^node-[a-zA-Z0-9-]+$'
          example: "node-abc-123-def-456"
        label:
          type: string
          maxLength: 100
          example: "Machine Learning Fundamentals"

    GraphEdge:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/EdgeData'

    EdgeData:
      type: object
      required:
        - id
        - source
        - target
      properties:
        id:
          type: string
          pattern: '^edge-[a-zA-Z0-9-]+$'
          example: "edge-abc-123-to-def-456"
        source:
          type: string
          pattern: '^node-[a-zA-Z0-9-]+$'
          example: "node-abc-123-def-456"
        target:
          type: string
          pattern: '^node-[a-zA-Z0-9-]+$'
          example: "node-def-456-ghi-789"

    Category:
      type: object
      required:
        - id
        - title
        - createdAt
      properties:
        id:
          type: string
          pattern: '^[a-zA-Z0-9-]+$'
          example: "cat-abc-123-def-456"
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: "Work Projects"
        description:
          type: string
          maxLength: 500
          example: "All work-related memories and tasks"
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T14:30:00Z"

    CreateCategoryRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: "Personal Projects"
        description:
          type: string
          maxLength: 500
          example: "Side projects and personal learning"

    UpdateCategoryRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
          example: "Updated Category Title"
        description:
          type: string
          maxLength: 500
          example: "Updated category description"

    AddMemoryToCategoryRequest:
      type: object
      required:
        - memoryId
      properties:
        memoryId:
          type: string
          pattern: '^[a-zA-Z0-9-]+$'
          example: "abc-123-def-456"