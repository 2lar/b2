/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/nodes": {
    /** List all memory nodes for the authenticated user */
    get: operations["listNodes"];
    /** Create a new memory node with automatic keyword extraction */
    post: operations["createNode"];
  };
  "/api/nodes/{nodeId}": {
    /** Get detailed information for a single memory node */
    get: operations["getNode"];
    /** Update a memory node's content with automatic reconnection */
    put: operations["updateNode"];
    /** Delete a memory node and clean up all connections */
    delete: operations["deleteNode"];
  };
  "/api/nodes/bulk-delete": {
    /** Delete multiple memory nodes efficiently in a single operation */
    post: operations["bulkDeleteNodes"];
  };
  "/api/graph-data": {
    /** Get complete graph data optimized for visualization libraries */
    get: operations["getGraphData"];
  };
  "/api/categories": {
    /** List all categories for the authenticated user */
    get: operations["listCategories"];
    /** Create a new category */
    post: operations["createCategory"];
  };
  "/api/categories/{categoryId}": {
    /** Get detailed information for a single category */
    get: operations["getCategory"];
    /** Update a category's details */
    put: operations["updateCategory"];
    /** Delete a category and all its memory associations */
    delete: operations["deleteCategory"];
  };
  "/api/categories/{categoryId}/memories": {
    /** Get all memories in a specific category */
    get: operations["getMemoriesInCategory"];
    /** Add a memory to a category */
    post: operations["addMemoryToCategory"];
  };
  "/api/categories/{categoryId}/memories/{memoryId}": {
    /** Remove a memory from a category */
    delete: operations["removeMemoryFromCategory"];
  };
  "/api/categories/hierarchy": {
    /** Get hierarchical category tree */
    get: operations["getCategoryHierarchy"];
  };
  "/api/categories/suggest": {
    /** Get AI-powered category suggestions for content */
    post: operations["suggestCategories"];
  };
  "/api/categories/rebuild": {
    /** Rebuild and optimize category structure */
    post: operations["rebuildCategories"];
  };
  "/api/categories/insights": {
    /** Get category usage insights and analytics */
    get: operations["getCategoryInsights"];
  };
  "/api/nodes/{nodeId}/categories": {
    /** Get all categories assigned to a node */
    get: operations["getNodeCategories"];
    /** Auto-categorize a node using AI */
    post: operations["categorizeNode"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Node: {
      /** @example abc-123-def-456-ghi-789 */
      nodeId: string;
      /** @example Machine learning requires large datasets for effective model training */
      content: string;
      /**
       * @description User-defined tags for organizing and categorizing memories
       * @example [
       *   "urgent",
       *   "work",
       *   "ml"
       * ]
       */
      tags?: string[];
      /**
       * Format: date-time
       * @example 2024-01-15T14:30:00Z
       */
      timestamp: string;
      /** @example 1 */
      version: number;
    };
    NodeDetails: components["schemas"]["Node"] & {
      /**
       * @example [
       *   "def-456-ghi-789",
       *   "ghi-789-jkl-012",
       *   "jkl-012-mno-345"
       * ]
       */
      edges?: string[];
    };
    CreateNodeRequest: {
      /** @example GraphQL provides a more efficient alternative to REST for complex data fetching requirements */
      content: string;
      /**
       * @description User-defined tags for organizing and categorizing memories
       * @example [
       *   "work",
       *   "graphql",
       *   "api"
       * ]
       */
      tags?: string[];
    };
    UpdateNodeRequest: {
      /** @example GraphQL and REST both have their place, but GraphQL excels in scenarios requiring flexible data fetching */
      content: string;
      /**
       * @description User-defined tags for organizing and categorizing memories
       * @example [
       *   "work",
       *   "graphql",
       *   "api",
       *   "updated"
       * ]
       */
      tags?: string[];
    };
    BulkDeleteRequest: {
      /**
       * @example [
       *   "abc-123-def-456",
       *   "def-456-ghi-789",
       *   "ghi-789-jkl-012"
       * ]
       */
      nodeIds: string[];
    };
    BulkDeleteResponse: {
      /** @example 2 */
      deletedCount?: number;
      /**
       * @example [
       *   "ghi-789-jkl-012"
       * ]
       */
      failedNodeIds?: string[];
      /** @example Successfully deleted 2 out of 3 nodes. 1 node could not be found. */
      message?: string;
    };
    GraphDataResponse: {
      /**
       * @example [
       *   {
       *     "data": {
       *       "id": "node-abc-123",
       *       "label": "Machine Learning"
       *     }
       *   },
       *   {
       *     "data": {
       *       "id": "node-def-456",
       *       "label": "Neural Networks"
       *     }
       *   },
       *   {
       *     "data": {
       *       "id": "edge-1",
       *       "source": "node-abc-123",
       *       "target": "node-def-456"
       *     }
       *   }
       * ]
       */
      elements?: (components["schemas"]["GraphNode"] | components["schemas"]["GraphEdge"])[];
    };
    GraphNode: {
      data?: components["schemas"]["NodeData"];
    };
    NodeData: {
      /** @example node-abc-123-def-456 */
      id: string;
      /** @example Machine Learning Fundamentals */
      label: string;
    };
    GraphEdge: {
      data?: components["schemas"]["EdgeData"];
    };
    EdgeData: {
      /** @example edge-abc-123-to-def-456 */
      id: string;
      /** @example node-abc-123-def-456 */
      source: string;
      /** @example node-def-456-ghi-789 */
      target: string;
    };
    Category: {
      /** @example cat-abc-123-def-456 */
      id: string;
      /** @example Work Projects */
      title: string;
      /** @example All work-related memories and tasks */
      description?: string;
      /**
       * @description Hierarchy level: 0 = top level, 1 = sub, 2 = sub-sub
       * @example 0
       */
      level: number;
      /**
       * @description ID of parent category (null for root categories)
       * @example cat-parent-123
       */
      parentId?: string;
      /**
       * @description Hex color code for UI
       * @example #2563eb
       */
      color?: string;
      /**
       * @description Icon identifier for UI
       * @example folder
       */
      icon?: string;
      /**
       * @description Whether this category was created by AI
       * @example false
       */
      aiGenerated?: boolean;
      /**
       * @description Number of memories in this category
       * @example 5
       */
      noteCount?: number;
      /**
       * Format: date-time
       * @example 2024-01-15T14:30:00Z
       */
      createdAt: string;
      /**
       * Format: date-time
       * @example 2024-01-15T14:30:00Z
       */
      updatedAt: string;
    };
    CreateCategoryRequest: {
      /** @example Personal Projects */
      title: string;
      /** @example Side projects and personal learning */
      description?: string;
    };
    UpdateCategoryRequest: {
      /** @example Updated Category Title */
      title: string;
      /** @example Updated category description */
      description?: string;
    };
    AddMemoryToCategoryRequest: {
      /** @example abc-123-def-456 */
      memoryId: string;
    };
    CategorySuggestion: {
      /**
       * @description Suggested category name
       * @example Technology
       */
      name: string;
      /**
       * @description Suggested hierarchy level
       * @example 0
       */
      level: number;
      /**
       * @description AI confidence score for this suggestion
       * @example 0.85
       */
      confidence: number;
      /**
       * @description Explanation for why this category was suggested
       * @example Content discusses artificial intelligence and technology concepts
       */
      reason: string;
      /**
       * @description ID of suggested parent category
       * @example cat-parent-123
       */
      parentId?: string;
    };
    CategoryInsights: {
      /** @description Categories with the most recent activity */
      mostActiveCategories?: components["schemas"]["CategoryActivity"][];
      /** @description Growth patterns over time */
      categoryGrowthTrends?: components["schemas"]["CategoryGrowthTrend"][];
      /** @description Suggested relationships between categories */
      suggestedConnections?: components["schemas"]["CategoryConnection"][];
      /** @description Identified areas for knowledge expansion */
      knowledgeGaps?: components["schemas"]["KnowledgeGap"][];
    };
    CategoryActivity: {
      /** @example cat-abc-123 */
      categoryId: string;
      /** @example Machine Learning */
      categoryName: string;
      /** @example 15 */
      memoryCount: number;
      /**
       * @description Memories added in the last 7 days
       * @example 3
       */
      recentAdds: number;
    };
    CategoryGrowthTrend: {
      /** @example cat-abc-123 */
      categoryId: string;
      /** @example Machine Learning */
      categoryName: string;
      /**
       * Format: date-time
       * @example 2024-01-15T00:00:00Z
       */
      date: string;
      /** @example 12 */
      memoryCount: number;
    };
    CategoryConnection: {
      /** @example cat-abc-123 */
      category1Id: string;
      /** @example Machine Learning */
      category1Name: string;
      /** @example cat-def-456 */
      category2Id: string;
      /** @example Data Science */
      category2Name: string;
      /**
       * @description Connection strength score
       * @example 0.78
       */
      strength: number;
      /**
       * @description Explanation for the suggested connection
       * @example Both categories contain content about statistical analysis and algorithms
       */
      reason: string;
    };
    KnowledgeGap: {
      /**
       * @description Identified knowledge gap topic
       * @example Deep Learning Optimization
       */
      topic: string;
      /**
       * @description Confidence in this gap identification
       * @example 0.72
       */
      confidence: number;
      /**
       * @description Categories that could be created to fill this gap
       * @example [
       *   "Optimization Algorithms",
       *   "Neural Network Tuning"
       * ]
       */
      suggestedCategories: string[];
      /**
       * @description Explanation for why this is a knowledge gap
       * @example You have extensive ML content but limited coverage of optimization techniques
       */
      reason: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** List all memory nodes for the authenticated user */
  listNodes: {
    responses: {
      /** @description Successfully retrieved user's memory nodes */
      200: {
        content: {
          "application/json": {
            /** @description Array of memory nodes owned by the authenticated user */
            nodes?: components["schemas"]["Node"][];
          };
        };
      };
      /** @description Authentication required - invalid or missing JWT token */
      401: {
        content: never;
      };
      /** @description Internal server error - check logs for details */
      500: {
        content: never;
      };
    };
  };
  /** Create a new memory node with automatic keyword extraction */
  createNode: {
    /** @description Memory content to be processed and stored */
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "GraphQL is a query language for APIs that provides a complete description of the data in your API"
         * }
         */
        "application/json": components["schemas"]["CreateNodeRequest"];
      };
    };
    responses: {
      /** @description Memory node created successfully with automatic connections */
      201: {
        content: {
          "application/json": components["schemas"]["Node"];
        };
      };
      /** @description Validation error - content is required and cannot be empty */
      400: {
        content: {
          "application/json": {
            /** @example content cannot be empty */
            error?: string;
          };
        };
      };
      /** @description Authentication required - invalid or missing JWT token */
      401: {
        content: never;
      };
      /** @description Internal server error - node creation failed */
      500: {
        content: never;
      };
    };
  };
  /** Get detailed information for a single memory node */
  getNode: {
    parameters: {
      path: {
        /** @description Unique identifier for the memory node */
        nodeId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved node details with connections */
      200: {
        content: {
          "application/json": components["schemas"]["NodeDetails"];
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Node not found or user doesn't have access */
      404: {
        content: {
          "application/json": {
            /** @example node not found */
            error?: string;
          };
        };
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Update a memory node's content with automatic reconnection */
  updateNode: {
    parameters: {
      path: {
        /** @description Unique identifier for the memory node to update */
        nodeId: string;
      };
    };
    /** @description Updated content for the memory node */
    requestBody: {
      content: {
        /**
         * @example {
         *   "content": "Deep learning models require even larger datasets and more computational power than traditional ML"
         * }
         */
        "application/json": components["schemas"]["UpdateNodeRequest"];
      };
    };
    responses: {
      /** @description Node updated successfully with recalculated connections */
      200: {
        content: {
          "application/json": {
            /** @example Node updated successfully */
            message?: string;
            /** @example abc-123-def-456 */
            nodeId?: string;
            /** @example 3 */
            version?: number;
          };
        };
      };
      /** @description Validation error - content cannot be empty */
      400: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Node not found or user doesn't have access */
      404: {
        content: never;
      };
      /** @description Version conflict - node was modified by another process */
      409: {
        content: never;
      };
      /** @description Internal server error during update */
      500: {
        content: never;
      };
    };
  };
  /** Delete a memory node and clean up all connections */
  deleteNode: {
    parameters: {
      path: {
        /** @description Unique identifier for the memory node to delete */
        nodeId: string;
      };
    };
    responses: {
      /** @description Node deleted successfully (no content returned) */
      204: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Node not found or user doesn't have access */
      404: {
        content: {
          "application/json": {
            /** @example node not found */
            error?: string;
          };
        };
      };
      /** @description Internal server error during deletion */
      500: {
        content: never;
      };
    };
  };
  /** Delete multiple memory nodes efficiently in a single operation */
  bulkDeleteNodes: {
    /** @description List of node IDs to delete (max 100) */
    requestBody: {
      content: {
        /**
         * @example {
         *   "nodeIds": [
         *     "abc-123-def-456",
         *     "def-456-ghi-789",
         *     "ghi-789-jkl-012"
         *   ]
         * }
         */
        "application/json": components["schemas"]["BulkDeleteRequest"];
      };
    };
    responses: {
      /** @description Bulk delete operation completed (may include partial failures) */
      200: {
        content: {
          "application/json": components["schemas"]["BulkDeleteResponse"];
        };
      };
      /** @description Validation error - invalid request format or too many nodes */
      400: {
        content: {
          "application/json": {
            /** @example cannot delete more than 100 nodes at once */
            error?: string;
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error during bulk operation */
      500: {
        content: never;
      };
    };
  };
  /** Get complete graph data optimized for visualization libraries */
  getGraphData: {
    responses: {
      /** @description Complete graph data ready for visualization */
      200: {
        content: {
          "application/json": components["schemas"]["GraphDataResponse"];
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error retrieving graph data */
      500: {
        content: never;
      };
    };
  };
  /** List all categories for the authenticated user */
  listCategories: {
    responses: {
      /** @description Successfully retrieved user's categories */
      200: {
        content: {
          "application/json": {
            /** @description Array of categories owned by the authenticated user */
            categories?: components["schemas"]["Category"][];
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Create a new category */
  createCategory: {
    /** @description Category details to create */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateCategoryRequest"];
      };
    };
    responses: {
      /** @description Category created successfully */
      201: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Validation error - title is required */
      400: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get detailed information for a single category */
  getCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category */
        categoryId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved category details */
      200: {
        content: {
          "application/json": components["schemas"]["Category"];
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Update a category's details */
  updateCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category to update */
        categoryId: string;
      };
    };
    /** @description Updated category details */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCategoryRequest"];
      };
    };
    responses: {
      /** @description Category updated successfully */
      200: {
        content: {
          "application/json": {
            /** @example Category updated successfully */
            message?: string;
            /** @example abc-123-def-456 */
            categoryId?: string;
          };
        };
      };
      /** @description Validation error */
      400: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Delete a category and all its memory associations */
  deleteCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category to delete */
        categoryId: string;
      };
    };
    responses: {
      /** @description Category deleted successfully */
      204: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get all memories in a specific category */
  getMemoriesInCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category */
        categoryId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved memories in category */
      200: {
        content: {
          "application/json": {
            memories?: components["schemas"]["Node"][];
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Add a memory to a category */
  addMemoryToCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category */
        categoryId: string;
      };
    };
    /** @description Memory to add to category */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddMemoryToCategoryRequest"];
      };
    };
    responses: {
      /** @description Memory added to category successfully */
      200: {
        content: {
          "application/json": {
            /** @example Memory added to category successfully */
            message?: string;
          };
        };
      };
      /** @description Validation error */
      400: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category or memory not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Remove a memory from a category */
  removeMemoryFromCategory: {
    parameters: {
      path: {
        /** @description Unique identifier for the category */
        categoryId: string;
        /** @description Unique identifier for the memory */
        memoryId: string;
      };
    };
    responses: {
      /** @description Memory removed from category successfully */
      204: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Category or memory not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get hierarchical category tree */
  getCategoryHierarchy: {
    responses: {
      /** @description Successfully retrieved category hierarchy */
      200: {
        content: {
          "application/json": {
            categories?: components["schemas"]["Category"][];
            /** @description Map of parent category IDs to arrays of child category IDs */
            hierarchy?: {
              [key: string]: string[];
            };
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get AI-powered category suggestions for content */
  suggestCategories: {
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description Content to analyze for category suggestions
           * @example Learning about machine learning algorithms and neural networks
           */
          content: string;
        };
      };
    };
    responses: {
      /** @description Successfully generated category suggestions */
      200: {
        content: {
          "application/json": {
            suggestions?: components["schemas"]["CategorySuggestion"][];
          };
        };
      };
      /** @description Validation error - content is required */
      400: {
        content: never;
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
      /** @description AI service temporarily unavailable */
      503: {
        content: never;
      };
    };
  };
  /** Rebuild and optimize category structure */
  rebuildCategories: {
    responses: {
      /** @description Category rebuild completed successfully */
      200: {
        content: {
          "application/json": {
            /** @example Category structure rebuilt successfully */
            message?: string;
            /** @example 25 */
            categoriesProcessed?: number;
            /** @example 8 */
            hierarchiesCreated?: number;
            /** @example 3 */
            categoriesMerged?: number;
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get category usage insights and analytics */
  getCategoryInsights: {
    responses: {
      /** @description Successfully retrieved category insights */
      200: {
        content: {
          "application/json": components["schemas"]["CategoryInsights"];
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Get all categories assigned to a node */
  getNodeCategories: {
    parameters: {
      path: {
        /** @description Unique identifier for the memory node */
        nodeId: string;
      };
    };
    responses: {
      /** @description Successfully retrieved node categories */
      200: {
        content: {
          "application/json": {
            categories?: (components["schemas"]["Category"] & ({
                /** @description AI confidence score for this categorization */
                confidence?: number;
                /**
                 * @description How this category was assigned
                 * @enum {string}
                 */
                method?: "ai" | "manual" | "rule-based";
              }))[];
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Node not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
    };
  };
  /** Auto-categorize a node using AI */
  categorizeNode: {
    parameters: {
      path: {
        /** @description Unique identifier for the memory node */
        nodeId: string;
      };
    };
    responses: {
      /** @description Successfully categorized node */
      200: {
        content: {
          "application/json": {
            categories?: components["schemas"]["Category"][];
            /** @example Node categorized successfully */
            message?: string;
          };
        };
      };
      /** @description Authentication required */
      401: {
        content: never;
      };
      /** @description Node not found */
      404: {
        content: never;
      };
      /** @description Internal server error */
      500: {
        content: never;
      };
      /** @description AI service temporarily unavailable */
      503: {
        content: never;
      };
    };
  };
}
