// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"backend2/application/commands/bus"
	"backend2/application/ports"
	bus2 "backend2/application/queries/bus"
	"backend2/infrastructure/config"
	"backend2/pkg/auth"
	"backend2/pkg/observability"
	"context"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeContainer creates a fully wired container
func InitializeContainer(ctx context.Context, cfg *config.Config) (*Container, error) {
	logger, err := ProvideLogger(cfg)
	if err != nil {
		return nil, err
	}
	awsConfig, err := ProvideAWSConfig(ctx, cfg)
	if err != nil {
		return nil, err
	}
	client := ProvideDynamoDBClient(awsConfig)
	nodeRepository := ProvideNodeRepository(client, cfg, logger)
	edgeRepository := ProvideEdgeRepository(client, cfg, logger)
	graphRepository := ProvideGraphRepository(client, nodeRepository, edgeRepository, cfg, logger)
	eventbridgeClient := ProvideEventBridgeClient(awsConfig)
	eventBus := ProvideEventBus(eventbridgeClient, cfg, logger)
	eventStore := ProvideEventStore(client, cfg)
	eventPublisher := ProvideEventPublisher(eventBus)
	unitOfWork := ProvideUnitOfWork(client, nodeRepository, edgeRepository, graphRepository, eventStore, eventPublisher)
	distributedLock := ProvideDistributedLock(client, cfg, logger)
	cloudwatchClient := ProvideCloudWatchClient(awsConfig)
	metrics := ProvideMetrics(cloudwatchClient, cfg)
	commandBus := ProvideCommandBus(unitOfWork, nodeRepository, edgeRepository, graphRepository, eventBus, eventPublisher, distributedLock, metrics, logger)
	cache := ProvideInMemoryCache()
	queryBus := ProvideQueryBus(graphRepository, nodeRepository, edgeRepository, cache, logger)
	distributedRateLimiter := ProvideDistributedRateLimiter(client, cfg)
	container := &Container{
		Config:      cfg,
		Logger:      logger,
		NodeRepo:    nodeRepository,
		GraphRepo:   graphRepository,
		EdgeRepo:    edgeRepository,
		EventBus:    eventBus,
		EventStore:  eventStore,
		UnitOfWork:  unitOfWork,
		CommandBus:  commandBus,
		QueryBus:    queryBus,
		Cache:       cache,
		Metrics:     metrics,
		RateLimiter: distributedRateLimiter,
	}
	return container, nil
}

// wire.go:

// Container holds all application dependencies
type Container struct {
	Config      *config.Config
	Logger      *zap.Logger
	NodeRepo    ports.NodeRepository
	GraphRepo   ports.GraphRepository
	EdgeRepo    ports.EdgeRepository
	EventBus    ports.EventBus
	EventStore  ports.EventStore
	UnitOfWork  ports.UnitOfWork
	CommandBus  *bus.CommandBus
	QueryBus    *bus2.QueryBus
	Cache       ports.Cache
	Metrics     *observability.Metrics
	RateLimiter *auth.DistributedRateLimiter
}

// SuperSet is the main provider set containing all providers
var SuperSet = wire.NewSet(
	ProvideLogger,
	ProvideAWSConfig,
	ProvideDynamoDBClient,
	ProvideEventBridgeClient,
	ProvideCloudWatchClient,
	ProvideNodeRepository,
	ProvideGraphRepository,
	ProvideEdgeRepository,
	ProvideEventBus,
	ProvideEventPublisher,
	ProvideEventStore,
	ProvideUnitOfWork,
	ProvideMetrics,
	ProvideDistributedRateLimiter,
	ProvideDistributedLock,
	ProvideCommandBus,
	ProvideQueryBus,
	ProvideInMemoryCache, wire.Struct(new(Container), "*"),
)
