// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"encoding/json"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
)

// CreateNodeRequest defines model for CreateNodeRequest.
type CreateNodeRequest struct {
	Content string `json:"content"`
}

// EdgeData defines model for EdgeData.
type EdgeData struct {
	Id     *string `json:"id,omitempty"`
	Source *string `json:"source,omitempty"`
	Target *string `json:"target,omitempty"`
}

// GraphDataResponse defines model for GraphDataResponse.
type GraphDataResponse struct {
	Elements *[]GraphDataResponse_Elements_Item `json:"elements,omitempty"`
}

// GraphDataResponse_Elements_Item defines model for GraphDataResponse.elements.Item.
type GraphDataResponse_Elements_Item struct {
	union json.RawMessage
}

// GraphEdge defines model for GraphEdge.
type GraphEdge struct {
	Data *EdgeData `json:"data,omitempty"`
}

// GraphNode defines model for GraphNode.
type GraphNode struct {
	Data *NodeData `json:"data,omitempty"`
}

// Node defines model for Node.
type Node struct {
	Content   *string    `json:"content,omitempty"`
	NodeId    *string    `json:"nodeId,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Version   *int       `json:"version,omitempty"`
}

// NodeData defines model for NodeData.
type NodeData struct {
	Id    *string `json:"id,omitempty"`
	Label *string `json:"label,omitempty"`
}

// NodeDetails defines model for NodeDetails.
type NodeDetails struct {
	Content   *string    `json:"content,omitempty"`
	Edges     *[]string  `json:"edges,omitempty"`
	NodeId    *string    `json:"nodeId,omitempty"`
	Timestamp *time.Time `json:"timestamp,omitempty"`
	Version   *int       `json:"version,omitempty"`
}

// UpdateNodeRequest defines model for UpdateNodeRequest.
type UpdateNodeRequest struct {
	Content string `json:"content"`
}

// CreateNodeJSONRequestBody defines body for CreateNode for application/json ContentType.
type CreateNodeJSONRequestBody = CreateNodeRequest

// UpdateNodeJSONRequestBody defines body for UpdateNode for application/json ContentType.
type UpdateNodeJSONRequestBody = UpdateNodeRequest

// AsGraphNode returns the union data inside the GraphDataResponse_Elements_Item as a GraphNode
func (t GraphDataResponse_Elements_Item) AsGraphNode() (GraphNode, error) {
	var body GraphNode
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGraphNode overwrites any union data inside the GraphDataResponse_Elements_Item as the provided GraphNode
func (t *GraphDataResponse_Elements_Item) FromGraphNode(v GraphNode) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGraphNode performs a merge with any union data inside the GraphDataResponse_Elements_Item, using the provided GraphNode
func (t *GraphDataResponse_Elements_Item) MergeGraphNode(v GraphNode) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGraphEdge returns the union data inside the GraphDataResponse_Elements_Item as a GraphEdge
func (t GraphDataResponse_Elements_Item) AsGraphEdge() (GraphEdge, error) {
	var body GraphEdge
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGraphEdge overwrites any union data inside the GraphDataResponse_Elements_Item as the provided GraphEdge
func (t *GraphDataResponse_Elements_Item) FromGraphEdge(v GraphEdge) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGraphEdge performs a merge with any union data inside the GraphDataResponse_Elements_Item, using the provided GraphEdge
func (t *GraphDataResponse_Elements_Item) MergeGraphEdge(v GraphEdge) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GraphDataResponse_Elements_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GraphDataResponse_Elements_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// Additional response types for compatibility
type NodeResponse struct {
	NodeID    string `json:"nodeId"`
	Content   string `json:"content"`
	Timestamp string `json:"timestamp"`
	Version   int    `json:"version"`
}

type NodeDetailsResponse struct {
	NodeID    string   `json:"nodeId"`
	Content   string   `json:"content"`
	Timestamp string   `json:"timestamp"`
	Version   int      `json:"version"`
	Edges     []string `json:"edges"`
}

// Helper functions for AWS Lambda API Gateway responses
func Success(w http.ResponseWriter, statusCode int, data interface{}) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	if data != nil {
		json.NewEncoder(w).Encode(data)
	}
}

func Error(w http.ResponseWriter, statusCode int, message string) {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(statusCode)
	json.NewEncoder(w).Encode(map[string]string{"error": message})
}
