// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	dynamodb2 "brain2-backend/infrastructure/dynamodb"
	"brain2-backend/internal/app"
	"brain2-backend/internal/repository"
	"brain2-backend/internal/service/category"
	"brain2-backend/internal/service/llm"
	"brain2-backend/internal/service/memory"
	"brain2-backend/pkg/config"
	"context"
	"github.com/aws/aws-sdk-go-v2/aws"
	config2 "github.com/aws/aws-sdk-go-v2/config"
	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"github.com/aws/aws-sdk-go-v2/service/eventbridge"
	"github.com/awslabs/aws-lambda-go-api-proxy/chi"
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
	"log"
)

// Injectors from wire.go:

// InitializeContainer wires together all dependencies and returns a complete Container.
func InitializeContainer() (*app.Container, error) {
	config := ProvideConfig()
	awsConfig, err := ProvideAWSConfig(config)
	if err != nil {
		return nil, err
	}
	client := ProvideDynamoDBClient(awsConfig)
	eventbridgeClient := ProvideEventBridgeClient(awsConfig)
	repository := ProvideRepository(client, config)
	service := ProvideMemoryService(repository)
	llmService := ProvideLLMService()
	categoryService := ProvideCategoryService(repository, llmService)
	mux := ProvideRouter(service, categoryService, eventbridgeClient)
	chiLambdaV2 := ProvideChiLambda(mux)
	container := &app.Container{
		Config:            config,
		DynamoDBClient:    client,
		EventBridgeClient: eventbridgeClient,
		Repository:        repository,
		MemoryService:     service,
		CategoryService:   categoryService,
		LLMService:        llmService,
		Router:            mux,
		ChiLambda:         chiLambdaV2,
	}
	return container, nil
}

// wire.go:

// ProviderSets define the dependency injection sets.
var (
	// ConfigSet provides configuration-related dependencies
	ConfigSet = wire.NewSet(
		ProvideConfig,
	)

	// AWSSet provides AWS service clients
	AWSSet = wire.NewSet(
		ProvideAWSConfig,
		ProvideDynamoDBClient,
		ProvideEventBridgeClient,
	)

	// RepositorySet provides repository implementations
	RepositorySet = wire.NewSet(
		ProvideRepository,
	)

	// ServiceSet provides business logic services
	ServiceSet = wire.NewSet(
		ProvideMemoryService,
		ProvideLLMService,
		ProvideCategoryService,
	)

	// HTTPSet provides HTTP-related dependencies
	HTTPSet = wire.NewSet(
		ProvideRouter,
		ProvideChiLambda,
	)

	// AllSet combines all provider sets
	AllSet = wire.NewSet(
		ConfigSet,
		AWSSet,
		RepositorySet,
		ServiceSet,
		HTTPSet,
	)
)

// ProvideConfig creates and returns the application configuration.
func ProvideConfig() *config.Config {
	return config.New()
}

// ProvideAWSConfig loads the AWS configuration.
func ProvideAWSConfig(cfg *config.Config) (aws.Config, error) {
	awsCfg, err := config2.LoadDefaultConfig(context.TODO(), config2.WithRegion(cfg.Region))
	if err != nil {
		log.Printf("unable to load SDK config: %v", err)
		return aws.Config{}, err
	}
	return awsCfg, nil
}

// ProvideDynamoDBClient creates and returns a DynamoDB client.
func ProvideDynamoDBClient(awsCfg aws.Config) *dynamodb.Client {
	return dynamodb.NewFromConfig(awsCfg)
}

// ProvideEventBridgeClient creates and returns an EventBridge client.
func ProvideEventBridgeClient(awsCfg aws.Config) *eventbridge.Client {
	return eventbridge.NewFromConfig(awsCfg)
}

// ProvideRepository creates and returns a repository implementation.
func ProvideRepository(client *dynamodb.Client, cfg *config.Config) repository.Repository {
	return dynamodb2.NewRepository(client, cfg.TableName, cfg.KeywordIndexName)
}

// ProvideMemoryService creates and returns a memory service.
func ProvideMemoryService(repo repository.Repository) memory.Service {
	return memory.NewService(repo)
}

// ProvideLLMService creates and returns an LLM service with mock provider.
func ProvideLLMService() *llm.Service {
	return llm.NewService(llm.NewMockProvider())
}

// ProvideCategoryService creates and returns an enhanced category service.
func ProvideCategoryService(repo repository.Repository, llmSvc *llm.Service) category.Service {
	return category.NewEnhancedService(repo, llmSvc)
}

// ProvideRouter creates and configures the HTTP router with all routes and middleware.
func ProvideRouter(
	memorySvc memory.Service,
	categorySvc category.Service,
	eventBridgeClient *eventbridge.Client,
) *chi.Mux {
	return SetupRouter(memorySvc, categorySvc, eventBridgeClient)
}

// ProvideChiLambda creates a Chi Lambda adapter.
func ProvideChiLambda(router *chi.Mux) *chiadapter.ChiLambdaV2 {
	return chiadapter.NewV2(router)
}
