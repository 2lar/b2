//go:build wireinject
// +build wireinject

// Package di provides dependency injection using Google Wire.
// This file contains the clean Wire configuration for perfect CQRS architecture.
package di

import (
	"brain2-backend/internal/application/queries"
	"brain2-backend/internal/application/services"
	"brain2-backend/internal/config"
	domainServices "brain2-backend/internal/domain/services"
	"brain2-backend/internal/handlers"
	"brain2-backend/internal/infrastructure/messaging"
	"brain2-backend/internal/infrastructure/observability"
	"brain2-backend/internal/infrastructure/persistence"
	"brain2-backend/internal/infrastructure/persistence/cache"
	"brain2-backend/internal/infrastructure/persistence/dynamodb"
	"brain2-backend/internal/repository"

	"github.com/google/wire"
)

// ============================================================================
// PROVIDER SETS - Organized by layer following clean architecture
// ============================================================================

// InfrastructureProviders provides all infrastructure dependencies.
var InfrastructureProviders = wire.NewSet(
	// Configuration
	config.LoadConfig,
	wire.FieldsOf(new(*config.Config), "TableName", "IndexName", "Events", "Features", "Infrastructure", "Metrics"),
	
	// AWS Clients
	NewAWSConfig,
	NewDynamoDBClient,
	NewEventBridgeClient,
	
	// Cross-cutting concerns
	NewLogger,
	NewCache,
	NewMetricsCollector,
	NewTracerProvider,
	
	// Infrastructure implementations
	persistence.NewDynamoDBStore,
	messaging.NewEventBridgePublisher,
	messaging.NewEventBusAdapter,
)

// RepositoryProviders provides all repository implementations with CQRS.
var RepositoryProviders = wire.NewSet(
	// Base repository implementations
	dynamodb.NewNodeRepositoryClean,
	dynamodb.NewEdgeRepositoryClean,
	dynamodb.NewCategoryRepositoryClean,
	dynamodb.NewGraphRepository,
	dynamodb.NewKeywordRepository,
	dynamodb.NewIdempotencyStore,
	
	// Bind implementations to CQRS interfaces
	wire.Bind(new(repository.NodeReader), new(*dynamodb.NodeRepositoryClean)),
	wire.Bind(new(repository.NodeWriter), new(*dynamodb.NodeRepositoryClean)),
	wire.Bind(new(repository.EdgeReader), new(*dynamodb.EdgeRepositoryClean)),
	wire.Bind(new(repository.EdgeWriter), new(*dynamodb.EdgeRepositoryClean)),
	wire.Bind(new(repository.CategoryReader), new(*dynamodb.CategoryRepositoryClean)),
	wire.Bind(new(repository.CategoryWriter), new(*dynamodb.CategoryRepositoryClean)),
	wire.Bind(new(repository.GraphRepository), new(*dynamodb.GraphRepository)),
	wire.Bind(new(repository.KeywordRepository), new(*dynamodb.KeywordRepository)),
	wire.Bind(new(repository.IdempotencyStore), new(*dynamodb.IdempotencyStore)),
	
	// Unit of Work
	dynamodb.NewDynamoDBUnitOfWorkFactoryClean,
	wire.Bind(new(repository.UnitOfWorkFactory), new(*dynamodb.DynamoDBUnitOfWorkFactoryClean)),
	
	// Repository Factory for decorators
	repository.NewRepositoryFactory,
	ProvideRepositoryFactoryConfig,
)

// DomainServiceProviders provides domain services.
var DomainServiceProviders = wire.NewSet(
	// Domain services
	domainServices.NewConnectionAnalyzer,
	ProvideConnectionAnalyzerConfig,
	
	// Domain event handling
	wire.Bind(new(shared.EventBus), new(*messaging.EventBusAdapter)),
)

// ApplicationServiceProviders provides application services with CQRS.
var ApplicationServiceProviders = wire.NewSet(
	// Command Services - Write operations
	services.NewNodeServiceClean,
	services.NewCategoryServiceClean,
	services.NewEdgeServiceClean,
	wire.Bind(new(services.NodeCommandService), new(*services.NodeServiceClean)),
	wire.Bind(new(services.CategoryCommandService), new(*services.CategoryServiceClean)),
	wire.Bind(new(services.EdgeCommandService), new(*services.EdgeServiceClean)),
	
	// Query Services - Read operations
	queries.NewNodeQueryService,
	queries.NewCategoryQueryService,
	queries.NewGraphQueryService,
	wire.Bind(new(services.NodeQueryService), new(*queries.NodeQueryService)),
	wire.Bind(new(services.CategoryQueryService), new(*queries.CategoryQueryService)),
	wire.Bind(new(services.GraphQueryService), new(*queries.GraphQueryService)),
	
	// Supporting Services
	services.NewCleanupService,
	wire.Bind(new(services.CleanupService), new(*services.CleanupService)),
)

// HandlerProviders provides HTTP handlers.
var HandlerProviders = wire.NewSet(
	// HTTP Handlers
	handlers.NewNodeHandler,
	handlers.NewCategoryHandler,
	handlers.NewEdgeHandler,
	handlers.NewHealthHandler,
	handlers.NewMetricsHandler,
	
	// Router
	NewRouter,
	
	// Middleware
	NewMiddlewareChain,
)

// ============================================================================
// CONTAINER PROVIDERS - Clean, focused containers
// ============================================================================

// InfrastructureContainerProviders provides the infrastructure container.
var InfrastructureContainerProviders = wire.NewSet(
	InfrastructureProviders,
	NewInfrastructureContainer,
)

// RepositoryContainerProviders provides the repository container.
var RepositoryContainerProviders = wire.NewSet(
	RepositoryProviders,
	NewRepositoryContainer,
)

// ServiceContainerProviders provides the service container.
var ServiceContainerProviders = wire.NewSet(
	DomainServiceProviders,
	ApplicationServiceProviders,
	NewServiceContainer,
)

// HandlerContainerProviders provides the handler container.
var HandlerContainerProviders = wire.NewSet(
	HandlerProviders,
	NewHandlerContainer,
)

// ============================================================================
// WIRE INJECTORS - Entry points for dependency injection
// ============================================================================

// InitializeApplicationContainer creates the root application container.
// This is the main entry point for the application.
func InitializeApplicationContainer() (*ApplicationContainer, error) {
	wire.Build(
		// Configuration
		config.LoadConfig,
		
		// Containers in dependency order
		InfrastructureContainerProviders,
		RepositoryContainerProviders,
		ServiceContainerProviders,
		HandlerContainerProviders,
		
		// Root container
		wire.Struct(new(ApplicationContainer), "*"),
	)
	return nil, nil
}

// InitializeInfrastructureContainer creates just the infrastructure container.
// Useful for testing or infrastructure-only operations.
func InitializeInfrastructureContainer(cfg *config.Config) (*InfrastructureContainer, error) {
	wire.Build(InfrastructureContainerProviders)
	return nil, nil
}

// InitializeRepositoryContainer creates just the repository container.
// Useful for data migration or repository testing.
func InitializeRepositoryContainer(infra *InfrastructureContainer) (*RepositoryContainer, error) {
	wire.Build(RepositoryContainerProviders)
	return nil, nil
}

// InitializeServiceContainer creates just the service container.
// Useful for service layer testing.
func InitializeServiceContainer(repos *RepositoryContainer, infra *InfrastructureContainer) (*ServiceContainer, error) {
	wire.Build(ServiceContainerProviders)
	return nil, nil
}

// InitializeHandlerContainer creates just the handler container.
// Useful for HTTP layer testing.
func InitializeHandlerContainer(services *ServiceContainer, infra *InfrastructureContainer) (*HandlerContainer, error) {
	wire.Build(HandlerContainerProviders)
	return nil, nil
}

// ============================================================================
// TEST INJECTORS - For testing specific components
// ============================================================================

// InitializeTestNodeService creates a NodeService for testing.
func InitializeTestNodeService(
	nodeReader repository.NodeReader,
	nodeWriter repository.NodeWriter,
	edgeReader repository.EdgeReader,
	edgeWriter repository.EdgeWriter,
	uowFactory repository.UnitOfWorkFactory,
	eventBus shared.EventBus,
	connectionAnalyzer *domainServices.ConnectionAnalyzer,
	idempotencyStore repository.IdempotencyStore,
) *services.NodeServiceClean {
	wire.Build(services.NewNodeServiceClean)
	return nil
}

// InitializeTestCategoryService creates a CategoryService for testing.
func InitializeTestCategoryService(
	categoryReader repository.CategoryReader,
	categoryWriter repository.CategoryWriter,
	uowFactory repository.UnitOfWorkFactory,
	eventBus shared.EventBus,
	idempotencyStore repository.IdempotencyStore,
) *services.CategoryServiceClean {
	wire.Build(services.NewCategoryServiceClean)
	return nil
}

// InitializeTestNodeQueryService creates a NodeQueryService for testing.
func InitializeTestNodeQueryService(
	nodeReader repository.NodeReader,
	edgeReader repository.EdgeReader,
	graphRepo repository.GraphRepository,
	cache cache.Cache,
) *queries.NodeQueryService {
	wire.Build(queries.NewNodeQueryService)
	return nil
}

// ============================================================================
// HELPER PROVIDERS - Configuration and setup helpers
// ============================================================================

// ProvideConnectionAnalyzerConfig provides configuration for ConnectionAnalyzer.
func ProvideConnectionAnalyzerConfig() domainServices.ConnectionAnalyzerConfig {
	return domainServices.ConnectionAnalyzerConfig{
		SimilarityThreshold: 0.3,
		MaxConnections:     5,
		RecencyWeight:      0.2,
	}
}

// ProvideRepositoryFactoryConfig provides configuration for RepositoryFactory.
func ProvideRepositoryFactoryConfig(cfg *config.Config) repository.FactoryConfig {
	switch cfg.Environment {
	case "production":
		return repository.ProductionFactoryConfig()
	case "testing":
		return repository.TestingFactoryConfig()
	default:
		return repository.DevelopmentFactoryConfig()
	}
}

// ProvideEventBusConfig provides configuration for EventBus.
func ProvideEventBusConfig(cfg *config.Config) messaging.EventBusConfig {
	return messaging.EventBusConfig{
		EventBusName: cfg.Events.EventBusName,
		Source:      "brain2-backend",
		MaxRetries:  3,
		Timeout:     30,
	}
}

// ProvideCacheConfig provides configuration for Cache.
func ProvideCacheConfig(cfg *config.Config) cache.Config {
	return cache.Config{
		Enabled:        cfg.Features.EnableCaching,
		MaxEntries:     1000,
		TTL:           300, // 5 minutes
		CleanupInterval: 600, // 10 minutes
	}
}