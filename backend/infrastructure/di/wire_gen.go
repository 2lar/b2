// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"backend/application/commands/bus"
	"backend/application/events"
	"backend/application/events/listeners"
	"backend/application/mediator"
	"backend/application/ports"
	"backend/application/projections"
	bus2 "backend/application/queries/bus"
	"backend/application/services"
	"backend/infrastructure/config"
	"backend/pkg/auth"
	"backend/pkg/errors"
	"backend/pkg/observability"
	"context"
	"github.com/google/wire"
	"go.uber.org/zap"
)

// Injectors from wire.go:

// InitializeContainer creates a fully wired container
func InitializeContainer(ctx context.Context, cfg *config.Config) (*Container, error) {
	logger, err := ProvideLogger(cfg)
	if err != nil {
		return nil, err
	}
	errorHandler := ProvideErrorHandler(logger, cfg)
	awsConfig, err := ProvideAWSConfig(ctx, cfg)
	if err != nil {
		return nil, err
	}
	client := ProvideDynamoDBClient(awsConfig)
	nodeRepository := ProvideNodeRepository(client, cfg, logger)
	edgeRepository := ProvideEdgeRepository(client, cfg, logger)
	graphRepository := ProvideGraphRepository(client, nodeRepository, edgeRepository, cfg, logger)
	eventbridgeClient := ProvideEventBridgeClient(awsConfig)
	eventBus := ProvideEventBus(eventbridgeClient, cfg, logger)
	eventStore := ProvideEventStore(client, cfg)
	eventPublisher := ProvideEventPublisher(eventBus)
	unitOfWork := ProvideUnitOfWork(client, nodeRepository, edgeRepository, graphRepository, eventStore, eventPublisher)
	graphLazyService := ProvideGraphLazyService(nodeRepository, edgeRepository, cfg, logger)
	distributedLock := ProvideDistributedLock(client, cfg, logger)
	cloudwatchClient := ProvideCloudWatchClient(awsConfig)
	metrics := ProvideMetrics(cloudwatchClient, cfg)
	commandBus := ProvideCommandBus(unitOfWork, nodeRepository, edgeRepository, graphRepository, graphLazyService, eventStore, eventBus, eventPublisher, distributedLock, metrics, cfg, logger)
	cache := ProvideInMemoryCache()
	operationStore := ProvideOperationStore()
	queryBus := ProvideQueryBus(graphRepository, nodeRepository, edgeRepository, cache, operationStore, logger)
	distributedRateLimiter := ProvideDistributedRateLimiter(client, cfg)
	mediator := ProvideMediator(commandBus, queryBus, metrics, logger)
	handlerRegistry := ProvideEventHandlerRegistry(logger)
	operationEventListener := ProvideOperationEventListener(operationStore, logger)
	graphStatsProjection := ProvideGraphStatsProjection(cache, logger)
	graphLoader := ProvideGraphLoader(graphRepository, nodeRepository, edgeRepository, logger)
	container := &Container{
		Config:                 cfg,
		Logger:                 logger,
		ErrorHandler:           errorHandler,
		NodeRepo:               nodeRepository,
		GraphRepo:              graphRepository,
		EdgeRepo:               edgeRepository,
		EventBus:               eventBus,
		EventStore:             eventStore,
		UnitOfWork:             unitOfWork,
		CommandBus:             commandBus,
		QueryBus:               queryBus,
		Cache:                  cache,
		Metrics:                metrics,
		RateLimiter:            distributedRateLimiter,
		OperationStore:         operationStore,
		Mediator:               mediator,
		EventHandlerRegistry:   handlerRegistry,
		OperationEventListener: operationEventListener,
		GraphStatsProjection:   graphStatsProjection,
		GraphLazyService:       graphLazyService,
		GraphLoader:            graphLoader,
	}
	return container, nil
}

// wire.go:

// Container holds all application dependencies
type Container struct {
	Config                 *config.Config
	Logger                 *zap.Logger
	ErrorHandler           *errors.ErrorHandler
	NodeRepo               ports.NodeRepository
	GraphRepo              ports.GraphRepository
	EdgeRepo               ports.EdgeRepository
	EventBus               ports.EventBus
	EventStore             ports.EventStore
	UnitOfWork             ports.UnitOfWork
	CommandBus             *bus.CommandBus
	QueryBus               *bus2.QueryBus
	Cache                  ports.Cache
	Metrics                *observability.Metrics
	RateLimiter            *auth.DistributedRateLimiter
	OperationStore         ports.OperationStore
	Mediator               *mediator.Mediator
	EventHandlerRegistry   *events.HandlerRegistry
	OperationEventListener *listeners.OperationEventListener
	GraphStatsProjection   *projections.GraphStatsProjection
	GraphLazyService       *services.GraphLazyService
	GraphLoader            *services.GraphLoader
}

// SuperSet is the main provider set containing all providers
var SuperSet = wire.NewSet(
	ProvideLogger,
	ProvideErrorHandler,
	ProvideAWSConfig,
	ProvideDynamoDBClient,
	ProvideEventBridgeClient,
	ProvideCloudWatchClient,
	ProvideNodeRepository,
	ProvideGraphRepository,
	ProvideEdgeRepository,
	ProvideGraphLazyService,
	ProvideGraphLoader,
	ProvideEventBus,
	ProvideEventPublisher,
	ProvideEventStore,
	ProvideUnitOfWork,
	ProvideMetrics,
	ProvideDistributedRateLimiter,
	ProvideDistributedLock,
	ProvideEdgeService,
	ProvideCommandBus,
	ProvideQueryBus,
	ProvideInMemoryCache,
	ProvideOperationStore,
	ProvideEventHandlerRegistry,
	ProvideOperationEventListener,
	ProvideGraphStatsProjection,
	ProvideMediator, wire.Struct(new(Container), "*"),
)
