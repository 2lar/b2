# Backend2 Makefile - DDD/CQRS Architecture
# Comprehensive build, test, and development automation

.PHONY: all build test clean help run dev

# Variables
GO := go
GOFLAGS := -v
GOTEST := $(GO) test
GOBUILD := $(GO) build
GOCLEAN := $(GO) clean
GOGET := $(GO) get
GOMOD := $(GO) mod
WIRE := wire
MOCKGEN := mockgen

# Directories
SRC_DIR := .
BUILD_DIR := build
COVERAGE_DIR := coverage
CMD_API := cmd/api
CMD_MIGRATE := cmd/migrate
CMD_WORKER := cmd/worker

# Build variables
VERSION := 1.0.0-alpha
GIT_COMMIT := $(shell git rev-parse --short HEAD 2>/dev/null || echo "unknown")
BUILD_TIME := $(shell date +"%Y-%m-%d_%H-%M-%S")
BUILD_ID := b2_backend2_$(BUILD_TIME)

# LDFLAGS for version injection
LDFLAGS := -ldflags "-s -w \
	-X main.Version=$(VERSION) \
	-X main.GitCommit=$(GIT_COMMIT) \
	-X main.BuildTime=$(BUILD_TIME) \
	-X main.BuildID=$(BUILD_ID)"

# Docker
DOCKER_COMPOSE := docker-compose
DOCKER_COMPOSE_FILE := docker-compose.yml
TEST_COMPOSE_FILE := docker-compose.test.yml

# Colors for output
RED := \033[0;31m
GREEN := \033[0;32m
YELLOW := \033[1;33m
BLUE := \033[0;34m
NC := \033[0m # No Color

# Default target
all: clean deps wire build test

# Help target
help:
	@echo "$(BLUE)Backend2 Makefile - Available targets:$(NC)"
	@echo ""
	@echo "$(GREEN)Build targets:$(NC)"
	@echo "  all              - Clean, build, and test everything"
	@echo "  build            - Build all components"
	@echo "  build-api        - Build API server only"
	@echo "  build-migrate    - Build migration tool only"
	@echo "  build-worker     - Build worker service only"
	@echo "  clean            - Clean build artifacts"
	@echo "  deps             - Download and verify dependencies"
	@echo "  wire             - Generate dependency injection code"
	@echo ""
	@echo "$(GREEN)Test targets:$(NC)"
	@echo "  test             - Run all tests"
	@echo "  test-unit        - Run unit tests only"
	@echo "  test-integration - Run integration tests"
	@echo "  test-e2e         - Run end-to-end tests"
	@echo "  test-bench       - Run performance benchmarks"
	@echo "  test-coverage    - Generate test coverage report"
	@echo "  test-race        - Run tests with race detection"
	@echo ""
	@echo "$(GREEN)Development targets:$(NC)"
	@echo "  run              - Run API server locally"
	@echo "  dev              - Run in development mode with hot reload"
	@echo "  migrate-up       - Run database migrations"
	@echo "  migrate-down     - Rollback database migrations"
	@echo "  worker           - Run worker service"
	@echo ""
	@echo "$(GREEN)Code quality targets:$(NC)"
	@echo "  fmt              - Format code"
	@echo "  lint             - Run linters"
	@echo "  vet              - Run go vet"
	@echo "  sec              - Run security checks"
	@echo "  mocks            - Generate mocks"
	@echo ""
	@echo "$(GREEN)Docker targets:$(NC)"
	@echo "  docker-build     - Build Docker images"
	@echo "  docker-up        - Start services with Docker Compose"
	@echo "  docker-down      - Stop Docker Compose services"
	@echo "  docker-logs      - Show Docker Compose logs"
	@echo ""
	@echo "$(GREEN)CI/CD targets:$(NC)"
	@echo "  ci               - Run CI pipeline checks"
	@echo "  check            - Run all checks (fmt, vet, lint, test)"

# Dependencies management
deps:
	@echo "$(YELLOW)üì¶ Managing dependencies...$(NC)"
	@$(GOMOD) download
	@$(GOMOD) tidy
	@$(GOMOD) verify
	@echo "$(GREEN)‚úÖ Dependencies ready$(NC)"

# Wire dependency injection
wire:
	@echo "$(YELLOW)üîÑ Generating dependency injection code...$(NC)"
	@if [ ! -d "infrastructure/di" ]; then \
		echo "$(RED)‚ùå infrastructure/di directory not found$(NC)"; \
		exit 1; \
	fi
	@if ! command -v wire &> /dev/null; then \
		echo "$(YELLOW)Installing Wire...$(NC)"; \
		go install github.com/google/wire/cmd/wire@latest; \
	fi
	@cd infrastructure/di && wire check && wire
	@echo "$(GREEN)‚úÖ Wire code generated$(NC)"

# Build targets
build: build-api build-migrate build-worker
	@echo "$(GREEN)‚úÖ All components built successfully$(NC)"

build-api: wire
	@echo "$(YELLOW)üèóÔ∏è  Building API server...$(NC)"
	@mkdir -p $(BUILD_DIR)/api
	@$(GOBUILD) $(LDFLAGS) -o $(BUILD_DIR)/api/api $(CMD_API)
	@echo "$(GREEN)‚úÖ API server built: $(BUILD_DIR)/api/api$(NC)"

build-migrate:
	@echo "$(YELLOW)üèóÔ∏è  Building migration tool...$(NC)"
	@mkdir -p $(BUILD_DIR)/migrate
	@if [ -f "$(CMD_MIGRATE)/main.go" ]; then \
		$(GOBUILD) $(LDFLAGS) -o $(BUILD_DIR)/migrate/migrate $(CMD_MIGRATE); \
		echo "$(GREEN)‚úÖ Migration tool built: $(BUILD_DIR)/migrate/migrate$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Migration tool not implemented yet$(NC)"; \
	fi

build-worker:
	@echo "$(YELLOW)üèóÔ∏è  Building worker service...$(NC)"
	@mkdir -p $(BUILD_DIR)/worker
	@if [ -f "$(CMD_WORKER)/main.go" ]; then \
		$(GOBUILD) $(LDFLAGS) -o $(BUILD_DIR)/worker/worker $(CMD_WORKER); \
		echo "$(GREEN)‚úÖ Worker service built: $(BUILD_DIR)/worker/worker$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  Worker service not implemented yet$(NC)"; \
	fi

# Clean target
clean:
	@echo "$(YELLOW)üßπ Cleaning build artifacts...$(NC)"
	@rm -rf $(BUILD_DIR)
	@rm -rf $(COVERAGE_DIR)
	@$(GOCLEAN)
	@echo "$(GREEN)‚úÖ Cleaned$(NC)"

# Test targets
test: test-unit test-integration
	@echo "$(GREEN)‚úÖ All tests passed$(NC)"

test-unit:
	@echo "$(YELLOW)üß™ Running unit tests...$(NC)"
	@$(GOTEST) -short -v ./domain/... ./application/...
	@echo "$(GREEN)‚úÖ Unit tests passed$(NC)"

test-integration:
	@echo "$(YELLOW)üß™ Running integration tests...$(NC)"
	@$(GOTEST) -v -tags=integration ./infrastructure/... ./interfaces/...
	@echo "$(GREEN)‚úÖ Integration tests passed$(NC)"

test-e2e:
	@echo "$(YELLOW)üß™ Running end-to-end tests...$(NC)"
	@$(GOTEST) -v -tags=e2e ./tests/e2e/...
	@echo "$(GREEN)‚úÖ E2E tests passed$(NC)"

test-bench:
	@echo "$(YELLOW)‚ö° Running benchmarks...$(NC)"
	@$(GOTEST) -bench=. -benchmem -benchtime=10s ./...

test-coverage:
	@echo "$(YELLOW)üìä Generating coverage report...$(NC)"
	@mkdir -p $(COVERAGE_DIR)
	@$(GOTEST) -coverprofile=$(COVERAGE_DIR)/coverage.out -covermode=atomic ./...
	@$(GO) tool cover -html=$(COVERAGE_DIR)/coverage.out -o $(COVERAGE_DIR)/coverage.html
	@echo "$(GREEN)‚úÖ Coverage report: $(COVERAGE_DIR)/coverage.html$(NC)"
	@$(GO) tool cover -func=$(COVERAGE_DIR)/coverage.out | grep total | awk '{print "Total Coverage: " $$3}'

test-race:
	@echo "$(YELLOW)üèÉ Running tests with race detection...$(NC)"
	@$(GOTEST) -race -v ./...
	@echo "$(GREEN)‚úÖ Race tests passed$(NC)"

# Development targets
run: build-api
	@echo "$(BLUE)üöÄ Starting API server...$(NC)"
	@./$(BUILD_DIR)/api/api

dev:
	@echo "$(BLUE)üîÑ Starting development server with hot reload...$(NC)"
	@if ! command -v air &> /dev/null; then \
		echo "$(YELLOW)Installing Air for hot reload...$(NC)"; \
		go install github.com/cosmtrek/air@latest; \
	fi
	@air -c .air.toml

migrate-up: build-migrate
	@echo "$(BLUE)‚¨ÜÔ∏è  Running migrations...$(NC)"
	@if [ -f "$(BUILD_DIR)/migrate/migrate" ]; then \
		./$(BUILD_DIR)/migrate/migrate up; \
	else \
		echo "$(RED)‚ùå Migration tool not found. Run 'make build-migrate' first$(NC)"; \
	fi

migrate-down: build-migrate
	@echo "$(BLUE)‚¨áÔ∏è  Rolling back migrations...$(NC)"
	@if [ -f "$(BUILD_DIR)/migrate/migrate" ]; then \
		./$(BUILD_DIR)/migrate/migrate down; \
	else \
		echo "$(RED)‚ùå Migration tool not found. Run 'make build-migrate' first$(NC)"; \
	fi

worker: build-worker
	@echo "$(BLUE)‚öôÔ∏è  Starting worker service...$(NC)"
	@if [ -f "$(BUILD_DIR)/worker/worker" ]; then \
		./$(BUILD_DIR)/worker/worker; \
	else \
		echo "$(RED)‚ùå Worker service not found. Run 'make build-worker' first$(NC)"; \
	fi

# Code quality targets
fmt:
	@echo "$(YELLOW)‚ú® Formatting code...$(NC)"
	@gofmt -w -s .
	@goimports -w .
	@echo "$(GREEN)‚úÖ Code formatted$(NC)"

lint:
	@echo "$(YELLOW)üîç Running linters...$(NC)"
	@if ! command -v golangci-lint &> /dev/null; then \
		echo "$(YELLOW)Installing golangci-lint...$(NC)"; \
		go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest; \
	fi
	@golangci-lint run --timeout 3m
	@echo "$(GREEN)‚úÖ Linting passed$(NC)"

vet:
	@echo "$(YELLOW)üîç Running go vet...$(NC)"
	@$(GO) vet ./...
	@echo "$(GREEN)‚úÖ go vet passed$(NC)"

sec:
	@echo "$(YELLOW)üîí Running security checks...$(NC)"
	@if ! command -v gosec &> /dev/null; then \
		echo "$(YELLOW)Installing gosec...$(NC)"; \
		go install github.com/securego/gosec/v2/cmd/gosec@latest; \
	fi
	@gosec -fmt json -out $(COVERAGE_DIR)/security.json ./... || true
	@echo "$(GREEN)‚úÖ Security check complete. Report: $(COVERAGE_DIR)/security.json$(NC)"

mocks:
	@echo "$(YELLOW)üé≠ Generating mocks...$(NC)"
	@if ! command -v mockgen &> /dev/null; then \
		echo "$(YELLOW)Installing mockgen...$(NC)"; \
		go install github.com/golang/mock/mockgen@latest; \
	fi
	@go generate ./...
	@echo "$(GREEN)‚úÖ Mocks generated$(NC)"

# Docker targets
docker-build:
	@echo "$(YELLOW)üê≥ Building Docker images...$(NC)"
	@docker build -t backend2-api:latest -f Dockerfile.api .
	@echo "$(GREEN)‚úÖ Docker images built$(NC)"

docker-up:
	@echo "$(YELLOW)üê≥ Starting Docker Compose services...$(NC)"
	@if [ -f "$(DOCKER_COMPOSE_FILE)" ]; then \
		$(DOCKER_COMPOSE) -f $(DOCKER_COMPOSE_FILE) up -d; \
		echo "$(GREEN)‚úÖ Services started$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  docker-compose.yml not found$(NC)"; \
	fi

docker-down:
	@echo "$(YELLOW)üê≥ Stopping Docker Compose services...$(NC)"
	@if [ -f "$(DOCKER_COMPOSE_FILE)" ]; then \
		$(DOCKER_COMPOSE) -f $(DOCKER_COMPOSE_FILE) down; \
		echo "$(GREEN)‚úÖ Services stopped$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  docker-compose.yml not found$(NC)"; \
	fi

docker-logs:
	@echo "$(YELLOW)üìã Showing Docker Compose logs...$(NC)"
	@if [ -f "$(DOCKER_COMPOSE_FILE)" ]; then \
		$(DOCKER_COMPOSE) -f $(DOCKER_COMPOSE_FILE) logs -f; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  docker-compose.yml not found$(NC)"; \
	fi

# CI/CD targets
ci: deps fmt vet lint test
	@echo "$(GREEN)‚úÖ CI checks passed$(NC)"

check: fmt vet lint test-unit
	@echo "$(GREEN)‚úÖ All checks passed$(NC)"

# Quick shortcuts
.PHONY: api migrate work
api: run
migrate: migrate-up
work: worker